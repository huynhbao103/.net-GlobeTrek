@model GlobeTrek.Models.Tour

@{
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}

<h2>Chỉnh sửa Tour</h2>

@using (Html.BeginForm("Edit", "Tours", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.id)

    <div class="form-container">
        <h4>Thông tin Tour</h4>
        <hr />

        <div class="form-group">
            @Html.LabelFor(model => model.title, "Tên Tour")
            @Html.EditorFor(model => model.title, new { htmlAttributes = new { @class = "form-control", required = "required", id = "title" } })
            @Html.ValidationMessageFor(model => model.title, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.slug, "Slug (SEO)")
            @Html.EditorFor(model => model.slug, new { htmlAttributes = new { @class = "form-control", id = "slug", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.slug, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.description, "Mô tả")
            @Html.TextAreaFor(model => model.description, new { @class = "form-control", rows = "3", required = "required" })
            @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.price, "Giá Người Lớn")
            @Html.EditorFor(model => model.price, new { htmlAttributes = new { @class = "form-control", type = "number", step = "0.01", required = "required" } })
            @Html.ValidationMessageFor(model => model.price, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.location, "Địa điểm")
            @Html.EditorFor(model => model.location, new { htmlAttributes = new { @class = "form-control", required = "required" } })
            @Html.ValidationMessageFor(model => model.location, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.duration, "Số ngày")
            <input id="duration" type="number" name="duration" class="form-control" min="1" value="@Model.duration" required />
            @Html.ValidationMessageFor(model => model.duration, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.tourTypeId, "Loại Tour")
            @Html.DropDownList("tourTypeId", ViewBag.tourTypeId as SelectList, "Chọn loại tour", new { @class = "form-control", required = "required" })
            @Html.ValidationMessageFor(model => model.tourTypeId, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.destinationId, "Điểm đến")
            @Html.DropDownList("destinationId", ViewBag.destinationId as SelectList, "Chọn điểm đến", new { @class = "form-control", required = "required" })
            @Html.ValidationMessageFor(model => model.destinationId, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            <label>Ảnh hiện tại:</label>
            <br />
            @if (!string.IsNullOrEmpty(Model.imageUrls))
            {
                <img src="@Model.imageUrls" alt="Tour Image" style="width: 150px; height: auto;" />
            }
            <input type="file" name="image" class="form-control" />
        </div>

        <div class="form-group">
            <label>Video hiện tại:</label>
            <br />
            @if (!string.IsNullOrEmpty(Model.videoUrls))
            {
                <video width="300" controls>
                    <source src="@Model.videoUrls" type="video/mp4">
                    Trình duyệt của bạn không hỗ trợ video.
                </video>
            }
            <input type="file" name="video" class="form-control" />
        </div>

        <h4>Số ghế trống</h4>
        <div>
            <button type="button" class="btn btn-info" onclick="generateAvailability()">Tự động điền</button>
            <button type="button" class="btn btn-success" onclick="addManualAvailability()">Thêm thủ công</button>
        </div>
        <div id="availability-container">
            @for (int i = 0; i < Model.TourAvailabilities.Count; i++)
            {
                var availability = Model.TourAvailabilities.ElementAt(i);
                <div class="form-group availability-item">
                    <div class="row">
                        <div class="col-md-5">
                            <label>Ngày:</label>
                            <input type="date" name="availabilities[@i].date" class="form-control" value="@availability.date.ToString("yyyy-MM-dd")" required />
                        </div>
                        <div class="col-md-5">
                            <label>Số ghế trống:</label>
                            <input type="number" name="availabilities[@i].availableSeats" class="form-control" value="@availability.availableSeats" required />
                        </div>
                        <div class="col-md-2">
                            <button type="button" class="btn btn-danger" onclick="removeAvailability(this)">Xóa</button>
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="form-group">
            <input type="submit" value="Cập nhật Tour" class="btn btn-primary" />
        </div>
    </div>
}

<style>
    .form-container {
        max-width: 600px;
        margin: auto;
        padding: 20px;
        background: #f9f9f9;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-control {
        width: 100%;
        padding: 8px;
        border-radius: 5px;
        border: 1px solid #ccc;
    }

    .btn {
        margin-right: 10px;
    }

    .availability-item {
        margin-top: 10px;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
        background: #fff;
    }
</style>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            $("#title").on("input", function () {
                var title = $(this).val();

                // Chuẩn hóa tiếng Việt: loại bỏ dấu nhưng giữ chữ cái
                var slug = title.normalize("NFD") // Phân tách dấu
                    .replace(/[\u0300-\u036f]/g, "") // Loại bỏ dấu thanh
                    .toLowerCase()
                    .replace(/ /g, "-")
                    .replace(/đ/g, "d")
                    .replace(/[^a-z0-9-]/g, "")
                    .replace(/-+/g, "-")
                    .trim("-");

                $("#slug").val(slug);
            });
        });
        function generateAvailability() {
            let container = document.getElementById("availability-container");
            container.innerHTML = "";
            let duration = parseInt(document.getElementById("duration").value) || 0;
            if (duration < 1) {
                alert("Vui lòng nhập số ngày hợp lệ!");
                return;
            }

            let today = new Date();
            for (let i = 0; i < duration; i++) {
                addAvailability(today, i);
            }
        }

        function addManualAvailability() {
            let today = new Date();
            addAvailability(today);
        }

        function addAvailability(startDate, index = null) {
            let container = document.getElementById("availability-container");
            let date = new Date(startDate);
            date.setDate(date.getDate() + (index !== null ? index : 0));

            let newItem = document.createElement("div");
            newItem.className = "form-group availability-item";
            newItem.innerHTML = `
                    <div class="row">
                        <div class="col-md-5">
                            <label>Ngày:</label>
                            <input type="date" name="availabilities[${container.children.length}].date" class="form-control" value="${date.toISOString().split('T')[0]}" min="${new Date().toISOString().split('T')[0]}" required />
                        </div>
                        <div class="col-md-5">
                            <label>Số ghế trống:</label>
                            <input type="number" name="availabilities[${container.children.length}].availableSeats" class="form-control" placeholder="Nhập số ghế trống" required />
                        </div>
                        <div class="col-md-2">
                            <button type="button" class="btn btn-danger" onclick="removeAvailability(this)">Xóa</button>
                        </div>
                    </div>
                `;
            container.appendChild(newItem);
        }

        function removeAvailability(button) {
            button.closest(".availability-item").remove();
        }
    </script>
}