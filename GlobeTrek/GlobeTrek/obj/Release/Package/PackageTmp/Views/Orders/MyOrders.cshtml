@model IEnumerable<GlobeTrek.Models.Order>

@{
    ViewBag.Title = "Đơn Hàng Của Tôi";
    Layout = "~/Views/Shared/_headerLayout.cshtml";
}

@Html.AntiForgeryToken()

<div class="container mt-5 mb-5 p-4" style="min-height: 500px;">
    <h2 class="mb-4 text-success fw-bold">Đơn Hàng Của Tôi</h2>

    @if (TempData["Info"] != null)
    {
        <div class="alert alert-info text-center p-3 rounded-3 shadow-sm" role="alert">@TempData["Info"]</div>
    }
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger text-center p-3 rounded-3 shadow-sm" role="alert">@TempData["Error"]</div>
    }
    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success text-center p-3 rounded-3 shadow-sm" role="alert">@TempData["Success"]</div>
    }

    @if (Session["UserID"] == null)
    {
        <div class="card mb-4 shadow-sm border-0">
            <div class="card-body p-4">
                <h5 class="fw-bold mb-3 text-muted">Tìm kiếm đơn hàng</h5>
                <form method="get" action="@Url.Action("MyOrders", "Orders")" class="row g-3">
                    <div class="col-md-10 col-sm-8">
                        <label class="form-label fw-bold">Email</label>
                        <input type="email" name="email" class="form-control" placeholder="Nhập email" value="@Request.QueryString["email"]">
                    </div>
                    <div class="col-md-2 col-sm-4 d-flex align-items-end">
                        <button type="submit" class="btn btn-success w-100">Tìm kiếm</button>
                    </div>
                </form>
            </div>
        </div>
    }

    @if (!Model.Any())
    {
        <div class="alert alert-info text-center mt-5 p-4 rounded-3 shadow-sm" role="alert">
            <h4 class="alert-heading fw-bold">Không có đơn hàng nào</h4>
            <p class="mb-3">
                @(Session["UserID"] == null && !string.IsNullOrWhiteSpace(Request.QueryString["email"])
                    ? "Không tìm thấy đơn hàng nào khớp với email. Vui lòng kiểm tra lại email."
                    : "Bạn chưa đặt đơn hàng nào. Hãy khám phá ngay các tour hấp dẫn!")
            </p>
            <a href="@Url.Action("GetAllTours", "getAllTour")" class="btn btn-success btn-lg">Đặt Tour Ngay</a>
        </div>
    }
    else
    {
        <div class="table-responsive shadow-sm rounded-3 overflow-hidden">
            <table class="table table-hover mb-0" id="ordersTable">
                <thead class="bg-success text-white">
                    <tr>
                        <th class="sortable" data-sort="id">Mã Đơn Hàng <i class="bi bi-arrow-down-up"></i></th>
                        <th class="sortable" data-sort="tourId">Tour ID <i class="bi bi-arrow-down-up"></i></th>
                        <th>Số Người</th>
                        <th class="sortable" data-sort="totalValue">Tổng Giá <i class="bi bi-arrow-down-up"></i></th>
                        <th class="sortable" data-sort="createdAt">Ngày Đặt <i class="bi bi-arrow-down-up"></i></th>
                        <th>Ngày Đi</th>
                        <th>Thanh Toán</th>
                        <th>Trạng Thái</th>
                        <th>Hành Động</th>
                    </tr>
                </thead>
                <tbody id="ordersTbody">
                    @foreach (var order in Model)
                    {
                        <tr data-order-id="@order.id">
                            <td>#@order.id</td>
                            <td>@order.tourId</td>
                            <td>@order.adultCount lớn, @order.childCount nhỏ</td>
                            <td>@order.totalValue.ToString("N0") VND</td>
                            <td>@order.createdAt</td>
                            <td>@order.bookingDate.ToString("dd/MM/yyyy")</td>
                            <td>@order.paymentMethod</td>
                            <td>
                                <span class="badge @(order.status == "pending" ? "bg-warning" : order.status == "processing" ? "bg-info" : order.status == "paid" ? "bg-success" : "bg-danger")" id="status-@order.id">
                                    @(order.status == "pending" ? "Đang chờ" : order.status == "processing" ? "Đang xử lý" : order.status == "paid" ? "Đã thanh toán" : "Đã hủy")
                                </span>
                            </td>
                            <td>
                                <div class="d-flex gap-2">
                                    <a href="@Url.Action("OrderDetails", "Orders", new { id = order.id })" class="btn btn-sm btn-outline-primary">
                                        <i class="bi bi-eye"></i> Chi tiết
                                    </a>
                                    @if (order.status == "pending")
                                    {
                                        <button class="btn btn-sm btn-outline-danger cancel-order" data-order-id="@order.id">
                                            <i class="bi bi-x-circle"></i> Hủy
                                        </button>
                                        <button class="btn btn-sm btn-outline-success pay-order" data-order-id="@order.id" data-email="@(Request.QueryString["email"] ?? "")">
                                            <i class="bi bi-credit-card"></i> Thanh toán
                                        </button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <nav aria-label="Page navigation" class="mt-4">
            <ul class="pagination justify-content-center" id="pagination"></ul>
        </nav>
    }
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            const rowsPerPage = 5;
            let currentPage = 1;
            let allRows = $('#ordersTbody tr').toArray();

            function displayPage(page) {
                const start = (page - 1) * rowsPerPage;
                const end = start + rowsPerPage;
                $('#ordersTbody tr').hide();
                allRows.slice(start, end).forEach(row => $(row).show());
            }

            function setupPagination(filteredRows) {
                const pageCount = Math.ceil(filteredRows.length / rowsPerPage);
                $('#pagination').empty();
                if (pageCount <= 1) return;

                $('#pagination').append(`
                    <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                        <a class="page-link" href="#" data-page="${currentPage - 1}"><i class="bi bi-chevron-left"></i></a>
                    </li>
                `);
                for (let i = 1; i <= pageCount; i++) {
                    $('#pagination').append(`
                        <li class="page-item ${i === currentPage ? 'active' : ''}">
                            <a class="page-link" href="#" data-page="${i}">${i}</a>
                        </li>
                    `);
                }
                $('#pagination').append(`
                    <li class="page-item ${currentPage === pageCount ? 'disabled' : ''}">
                        <a class="page-link" href="#" data-page="${currentPage + 1}"><i class="bi bi-chevron-right"></i></a>
                    </li>
                `);
                displayPage(currentPage);
            }

            $('#pagination').on('click', 'a.page-link', function (e) {
                e.preventDefault();
                const page = parseInt($(this).data('page'));
                if (page >= 1 && page <= Math.ceil(allRows.length / rowsPerPage)) {
                    currentPage = page;
                    displayPage(currentPage);
                    setupPagination(allRows);
                }
            });

            $('.cancel-order').on('click', function () {
                const orderId = $(this).data('order-id');
                if (confirm('Bạn có chắc chắn muốn hủy đơn hàng #' + orderId + ' không?')) {
                    $.ajax({
                        url: '@Url.Action("CancelOrder", "Orders")',
                        type: 'POST',
                        data: {
                            orderId: orderId,
                            __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        },
                        success: function (response) {
                            if (response.success) {
                                alert(response.message);
                                const statusBadge = $('#status-' + orderId);
                                statusBadge.removeClass('bg-warning').addClass('bg-danger').text('Đã hủy');
                                $(`tr[data-order-id="${orderId}"] .cancel-order`).remove();
                                $(`tr[data-order-id="${orderId}"] .pay-order`).remove();
                            } else {
                                alert(response.message);
                            }
                        },
                        error: function (xhr) {
                            alert('Có lỗi xảy ra khi hủy đơn hàng: ' + xhr.status + ' ' + xhr.statusText);
                        }
                    });
                }
            });

            $('.pay-order').on('click', function () {
                const orderId = $(this).data('order-id');
                const email = $(this).data('email'); // Lấy email từ data-email
                $.ajax({
                    url: '@Url.Action("PayOrder", "Orders")',
                    type: 'POST',
                    data: {
                        orderId: orderId,
                        email: email, // Truyền email nếu có
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        if (response.success) {
                            window.location.href = response.redirectUrl;
                        } else {
                            alert(response.message);
                        }
                    },
                    error: function (xhr) {
                        alert('Có lỗi xảy ra khi khởi tạo thanh toán: ' + xhr.status + ' ' + xhr.statusText);
                    }
                });
            });

            setupPagination(allRows);
        });
    </script>
}